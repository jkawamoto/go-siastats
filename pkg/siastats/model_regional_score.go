/*
 * siastats.info API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2021-03-12
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package siastats

import (
	"encoding/json"
)

// RegionalScore struct for RegionalScore
type RegionalScore struct {
	Region       *string `json:"region,omitempty"`
	Latency      *int32  `json:"latency,omitempty"`
	Up           *string `json:"up,omitempty"`
	Down         *string `json:"down,omitempty"`
	LatencyScore *int32  `json:"latencyScore,omitempty"`
	UpScore      *int32  `json:"upScore,omitempty"`
	DownScore    *int32  `json:"downScore,omitempty"`
	FinalScore   *int32  `json:"finalScore,omitempty"`
}

// NewRegionalScore instantiates a new RegionalScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionalScore() *RegionalScore {
	this := RegionalScore{}
	return &this
}

// NewRegionalScoreWithDefaults instantiates a new RegionalScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionalScoreWithDefaults() *RegionalScore {
	this := RegionalScore{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *RegionalScore) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *RegionalScore) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *RegionalScore) SetRegion(v string) {
	o.Region = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *RegionalScore) GetLatency() int32 {
	if o == nil || o.Latency == nil {
		var ret int32
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetLatencyOk() (*int32, bool) {
	if o == nil || o.Latency == nil {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *RegionalScore) HasLatency() bool {
	if o != nil && o.Latency != nil {
		return true
	}

	return false
}

// SetLatency gets a reference to the given int32 and assigns it to the Latency field.
func (o *RegionalScore) SetLatency(v int32) {
	o.Latency = &v
}

// GetUp returns the Up field value if set, zero value otherwise.
func (o *RegionalScore) GetUp() string {
	if o == nil || o.Up == nil {
		var ret string
		return ret
	}
	return *o.Up
}

// GetUpOk returns a tuple with the Up field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetUpOk() (*string, bool) {
	if o == nil || o.Up == nil {
		return nil, false
	}
	return o.Up, true
}

// HasUp returns a boolean if a field has been set.
func (o *RegionalScore) HasUp() bool {
	if o != nil && o.Up != nil {
		return true
	}

	return false
}

// SetUp gets a reference to the given string and assigns it to the Up field.
func (o *RegionalScore) SetUp(v string) {
	o.Up = &v
}

// GetDown returns the Down field value if set, zero value otherwise.
func (o *RegionalScore) GetDown() string {
	if o == nil || o.Down == nil {
		var ret string
		return ret
	}
	return *o.Down
}

// GetDownOk returns a tuple with the Down field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetDownOk() (*string, bool) {
	if o == nil || o.Down == nil {
		return nil, false
	}
	return o.Down, true
}

// HasDown returns a boolean if a field has been set.
func (o *RegionalScore) HasDown() bool {
	if o != nil && o.Down != nil {
		return true
	}

	return false
}

// SetDown gets a reference to the given string and assigns it to the Down field.
func (o *RegionalScore) SetDown(v string) {
	o.Down = &v
}

// GetLatencyScore returns the LatencyScore field value if set, zero value otherwise.
func (o *RegionalScore) GetLatencyScore() int32 {
	if o == nil || o.LatencyScore == nil {
		var ret int32
		return ret
	}
	return *o.LatencyScore
}

// GetLatencyScoreOk returns a tuple with the LatencyScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetLatencyScoreOk() (*int32, bool) {
	if o == nil || o.LatencyScore == nil {
		return nil, false
	}
	return o.LatencyScore, true
}

// HasLatencyScore returns a boolean if a field has been set.
func (o *RegionalScore) HasLatencyScore() bool {
	if o != nil && o.LatencyScore != nil {
		return true
	}

	return false
}

// SetLatencyScore gets a reference to the given int32 and assigns it to the LatencyScore field.
func (o *RegionalScore) SetLatencyScore(v int32) {
	o.LatencyScore = &v
}

// GetUpScore returns the UpScore field value if set, zero value otherwise.
func (o *RegionalScore) GetUpScore() int32 {
	if o == nil || o.UpScore == nil {
		var ret int32
		return ret
	}
	return *o.UpScore
}

// GetUpScoreOk returns a tuple with the UpScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetUpScoreOk() (*int32, bool) {
	if o == nil || o.UpScore == nil {
		return nil, false
	}
	return o.UpScore, true
}

// HasUpScore returns a boolean if a field has been set.
func (o *RegionalScore) HasUpScore() bool {
	if o != nil && o.UpScore != nil {
		return true
	}

	return false
}

// SetUpScore gets a reference to the given int32 and assigns it to the UpScore field.
func (o *RegionalScore) SetUpScore(v int32) {
	o.UpScore = &v
}

// GetDownScore returns the DownScore field value if set, zero value otherwise.
func (o *RegionalScore) GetDownScore() int32 {
	if o == nil || o.DownScore == nil {
		var ret int32
		return ret
	}
	return *o.DownScore
}

// GetDownScoreOk returns a tuple with the DownScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetDownScoreOk() (*int32, bool) {
	if o == nil || o.DownScore == nil {
		return nil, false
	}
	return o.DownScore, true
}

// HasDownScore returns a boolean if a field has been set.
func (o *RegionalScore) HasDownScore() bool {
	if o != nil && o.DownScore != nil {
		return true
	}

	return false
}

// SetDownScore gets a reference to the given int32 and assigns it to the DownScore field.
func (o *RegionalScore) SetDownScore(v int32) {
	o.DownScore = &v
}

// GetFinalScore returns the FinalScore field value if set, zero value otherwise.
func (o *RegionalScore) GetFinalScore() int32 {
	if o == nil || o.FinalScore == nil {
		var ret int32
		return ret
	}
	return *o.FinalScore
}

// GetFinalScoreOk returns a tuple with the FinalScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionalScore) GetFinalScoreOk() (*int32, bool) {
	if o == nil || o.FinalScore == nil {
		return nil, false
	}
	return o.FinalScore, true
}

// HasFinalScore returns a boolean if a field has been set.
func (o *RegionalScore) HasFinalScore() bool {
	if o != nil && o.FinalScore != nil {
		return true
	}

	return false
}

// SetFinalScore gets a reference to the given int32 and assigns it to the FinalScore field.
func (o *RegionalScore) SetFinalScore(v int32) {
	o.FinalScore = &v
}

func (o RegionalScore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Latency != nil {
		toSerialize["latency"] = o.Latency
	}
	if o.Up != nil {
		toSerialize["up"] = o.Up
	}
	if o.Down != nil {
		toSerialize["down"] = o.Down
	}
	if o.LatencyScore != nil {
		toSerialize["latencyScore"] = o.LatencyScore
	}
	if o.UpScore != nil {
		toSerialize["upScore"] = o.UpScore
	}
	if o.DownScore != nil {
		toSerialize["downScore"] = o.DownScore
	}
	if o.FinalScore != nil {
		toSerialize["finalScore"] = o.FinalScore
	}
	return json.Marshal(toSerialize)
}

type NullableRegionalScore struct {
	value *RegionalScore
	isSet bool
}

func (v NullableRegionalScore) Get() *RegionalScore {
	return v.value
}

func (v *NullableRegionalScore) Set(val *RegionalScore) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionalScore) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionalScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionalScore(val *RegionalScore) *NullableRegionalScore {
	return &NullableRegionalScore{value: val, isSet: true}
}

func (v NullableRegionalScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionalScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
