/*
 * siastats.info API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2021-03-10
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package siastats

import (
	"encoding/json"
)

// Status struct for Status
type Status struct {
	Consensusblock *int32  `json:"consensusblock,omitempty"`
	Lastblock      *int32  `json:"lastblock,omitempty"`
	Heartbeat      *int64  `json:"heartbeat,omitempty"`
	Peers          *int32  `json:"peers,omitempty"`
	Version        *string `json:"version,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus() *Status {
	this := Status{}
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetConsensusblock returns the Consensusblock field value if set, zero value otherwise.
func (o *Status) GetConsensusblock() int32 {
	if o == nil || o.Consensusblock == nil {
		var ret int32
		return ret
	}
	return *o.Consensusblock
}

// GetConsensusblockOk returns a tuple with the Consensusblock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetConsensusblockOk() (*int32, bool) {
	if o == nil || o.Consensusblock == nil {
		return nil, false
	}
	return o.Consensusblock, true
}

// HasConsensusblock returns a boolean if a field has been set.
func (o *Status) HasConsensusblock() bool {
	if o != nil && o.Consensusblock != nil {
		return true
	}

	return false
}

// SetConsensusblock gets a reference to the given int32 and assigns it to the Consensusblock field.
func (o *Status) SetConsensusblock(v int32) {
	o.Consensusblock = &v
}

// GetLastblock returns the Lastblock field value if set, zero value otherwise.
func (o *Status) GetLastblock() int32 {
	if o == nil || o.Lastblock == nil {
		var ret int32
		return ret
	}
	return *o.Lastblock
}

// GetLastblockOk returns a tuple with the Lastblock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetLastblockOk() (*int32, bool) {
	if o == nil || o.Lastblock == nil {
		return nil, false
	}
	return o.Lastblock, true
}

// HasLastblock returns a boolean if a field has been set.
func (o *Status) HasLastblock() bool {
	if o != nil && o.Lastblock != nil {
		return true
	}

	return false
}

// SetLastblock gets a reference to the given int32 and assigns it to the Lastblock field.
func (o *Status) SetLastblock(v int32) {
	o.Lastblock = &v
}

// GetHeartbeat returns the Heartbeat field value if set, zero value otherwise.
func (o *Status) GetHeartbeat() int64 {
	if o == nil || o.Heartbeat == nil {
		var ret int64
		return ret
	}
	return *o.Heartbeat
}

// GetHeartbeatOk returns a tuple with the Heartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetHeartbeatOk() (*int64, bool) {
	if o == nil || o.Heartbeat == nil {
		return nil, false
	}
	return o.Heartbeat, true
}

// HasHeartbeat returns a boolean if a field has been set.
func (o *Status) HasHeartbeat() bool {
	if o != nil && o.Heartbeat != nil {
		return true
	}

	return false
}

// SetHeartbeat gets a reference to the given int64 and assigns it to the Heartbeat field.
func (o *Status) SetHeartbeat(v int64) {
	o.Heartbeat = &v
}

// GetPeers returns the Peers field value if set, zero value otherwise.
func (o *Status) GetPeers() int32 {
	if o == nil || o.Peers == nil {
		var ret int32
		return ret
	}
	return *o.Peers
}

// GetPeersOk returns a tuple with the Peers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetPeersOk() (*int32, bool) {
	if o == nil || o.Peers == nil {
		return nil, false
	}
	return o.Peers, true
}

// HasPeers returns a boolean if a field has been set.
func (o *Status) HasPeers() bool {
	if o != nil && o.Peers != nil {
		return true
	}

	return false
}

// SetPeers gets a reference to the given int32 and assigns it to the Peers field.
func (o *Status) SetPeers(v int32) {
	o.Peers = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Status) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Status) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Status) SetVersion(v string) {
	o.Version = &v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Consensusblock != nil {
		toSerialize["consensusblock"] = o.Consensusblock
	}
	if o.Lastblock != nil {
		toSerialize["lastblock"] = o.Lastblock
	}
	if o.Heartbeat != nil {
		toSerialize["heartbeat"] = o.Heartbeat
	}
	if o.Peers != nil {
		toSerialize["peers"] = o.Peers
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
