/*
 * siastats.info API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2021-03-12
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package siastats

import (
	"encoding/json"
)

// Ticks struct for Ticks
type Ticks struct {
	Total      *[][]float32 `json:"total,omitempty"`
	Used       *[][]float32 `json:"used,omitempty"`
	Storage    *[][]float32 `json:"storage,omitempty"`
	Bandwidth  *[][]float32 `json:"bandwidth,omitempty"`
	Collateral *[][]float32 `json:"collateral,omitempty"`
}

// NewTicks instantiates a new Ticks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicks() *Ticks {
	this := Ticks{}
	return &this
}

// NewTicksWithDefaults instantiates a new Ticks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicksWithDefaults() *Ticks {
	this := Ticks{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Ticks) GetTotal() [][]float32 {
	if o == nil || o.Total == nil {
		var ret [][]float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticks) GetTotalOk() (*[][]float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Ticks) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given [][]float32 and assigns it to the Total field.
func (o *Ticks) SetTotal(v [][]float32) {
	o.Total = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *Ticks) GetUsed() [][]float32 {
	if o == nil || o.Used == nil {
		var ret [][]float32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticks) GetUsedOk() (*[][]float32, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *Ticks) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given [][]float32 and assigns it to the Used field.
func (o *Ticks) SetUsed(v [][]float32) {
	o.Used = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *Ticks) GetStorage() [][]float32 {
	if o == nil || o.Storage == nil {
		var ret [][]float32
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticks) GetStorageOk() (*[][]float32, bool) {
	if o == nil || o.Storage == nil {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *Ticks) HasStorage() bool {
	if o != nil && o.Storage != nil {
		return true
	}

	return false
}

// SetStorage gets a reference to the given [][]float32 and assigns it to the Storage field.
func (o *Ticks) SetStorage(v [][]float32) {
	o.Storage = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *Ticks) GetBandwidth() [][]float32 {
	if o == nil || o.Bandwidth == nil {
		var ret [][]float32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticks) GetBandwidthOk() (*[][]float32, bool) {
	if o == nil || o.Bandwidth == nil {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *Ticks) HasBandwidth() bool {
	if o != nil && o.Bandwidth != nil {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given [][]float32 and assigns it to the Bandwidth field.
func (o *Ticks) SetBandwidth(v [][]float32) {
	o.Bandwidth = &v
}

// GetCollateral returns the Collateral field value if set, zero value otherwise.
func (o *Ticks) GetCollateral() [][]float32 {
	if o == nil || o.Collateral == nil {
		var ret [][]float32
		return ret
	}
	return *o.Collateral
}

// GetCollateralOk returns a tuple with the Collateral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ticks) GetCollateralOk() (*[][]float32, bool) {
	if o == nil || o.Collateral == nil {
		return nil, false
	}
	return o.Collateral, true
}

// HasCollateral returns a boolean if a field has been set.
func (o *Ticks) HasCollateral() bool {
	if o != nil && o.Collateral != nil {
		return true
	}

	return false
}

// SetCollateral gets a reference to the given [][]float32 and assigns it to the Collateral field.
func (o *Ticks) SetCollateral(v [][]float32) {
	o.Collateral = &v
}

func (o Ticks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	if o.Storage != nil {
		toSerialize["storage"] = o.Storage
	}
	if o.Bandwidth != nil {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if o.Collateral != nil {
		toSerialize["collateral"] = o.Collateral
	}
	return json.Marshal(toSerialize)
}

type NullableTicks struct {
	value *Ticks
	isSet bool
}

func (v NullableTicks) Get() *Ticks {
	return v.value
}

func (v *NullableTicks) Set(val *Ticks) {
	v.value = val
	v.isSet = true
}

func (v NullableTicks) IsSet() bool {
	return v.isSet
}

func (v *NullableTicks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicks(val *Ticks) *NullableTicks {
	return &NullableTicks{value: val, isSet: true}
}

func (v NullableTicks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
