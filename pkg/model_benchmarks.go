/*
 * siastats.info API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2019-10-03
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package siastats

import (
	"encoding/json"
)

// Benchmarks struct for Benchmarks
type Benchmarks struct {
	FinalScore            *int32  `json:"finalScore,omitempty"`
	Latency               *int32  `json:"latency,omitempty"`
	LatencyScore          *int32  `json:"latencyScore,omitempty"`
	Up                    *int64  `json:"up,omitempty"`
	UpScore               *int32  `json:"upScore,omitempty"`
	Down                  *int64  `json:"down,omitempty"`
	DownScore             *int32  `json:"downScore,omitempty"`
	ContractSuccess       *bool   `json:"contractSuccess,omitempty"`
	BenchFailureRate      *int32  `json:"benchFailureRate,omitempty"`
	ErrorType             *string `json:"errorType,omitempty"`
	ErrorDescription      *string `json:"errorDescription,omitempty"`
	ErrorFull             *string `json:"errorFull,omitempty"`
	ScoreChange1day       *string `json:"scoreChange_1day,omitempty"`
	ScoreChange7day       *string `json:"scoreChange_7day,omitempty"`
	ScoreChange7daySmooth *string `json:"scoreChange_7day_smooth,omitempty"`
}

// NewBenchmarks instantiates a new Benchmarks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenchmarks() *Benchmarks {
	this := Benchmarks{}
	return &this
}

// NewBenchmarksWithDefaults instantiates a new Benchmarks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenchmarksWithDefaults() *Benchmarks {
	this := Benchmarks{}
	return &this
}

// GetFinalScore returns the FinalScore field value if set, zero value otherwise.
func (o *Benchmarks) GetFinalScore() int32 {
	if o == nil || o.FinalScore == nil {
		var ret int32
		return ret
	}
	return *o.FinalScore
}

// GetFinalScoreOk returns a tuple with the FinalScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetFinalScoreOk() (*int32, bool) {
	if o == nil || o.FinalScore == nil {
		return nil, false
	}
	return o.FinalScore, true
}

// HasFinalScore returns a boolean if a field has been set.
func (o *Benchmarks) HasFinalScore() bool {
	if o != nil && o.FinalScore != nil {
		return true
	}

	return false
}

// SetFinalScore gets a reference to the given int32 and assigns it to the FinalScore field.
func (o *Benchmarks) SetFinalScore(v int32) {
	o.FinalScore = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *Benchmarks) GetLatency() int32 {
	if o == nil || o.Latency == nil {
		var ret int32
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetLatencyOk() (*int32, bool) {
	if o == nil || o.Latency == nil {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *Benchmarks) HasLatency() bool {
	if o != nil && o.Latency != nil {
		return true
	}

	return false
}

// SetLatency gets a reference to the given int32 and assigns it to the Latency field.
func (o *Benchmarks) SetLatency(v int32) {
	o.Latency = &v
}

// GetLatencyScore returns the LatencyScore field value if set, zero value otherwise.
func (o *Benchmarks) GetLatencyScore() int32 {
	if o == nil || o.LatencyScore == nil {
		var ret int32
		return ret
	}
	return *o.LatencyScore
}

// GetLatencyScoreOk returns a tuple with the LatencyScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetLatencyScoreOk() (*int32, bool) {
	if o == nil || o.LatencyScore == nil {
		return nil, false
	}
	return o.LatencyScore, true
}

// HasLatencyScore returns a boolean if a field has been set.
func (o *Benchmarks) HasLatencyScore() bool {
	if o != nil && o.LatencyScore != nil {
		return true
	}

	return false
}

// SetLatencyScore gets a reference to the given int32 and assigns it to the LatencyScore field.
func (o *Benchmarks) SetLatencyScore(v int32) {
	o.LatencyScore = &v
}

// GetUp returns the Up field value if set, zero value otherwise.
func (o *Benchmarks) GetUp() int64 {
	if o == nil || o.Up == nil {
		var ret int64
		return ret
	}
	return *o.Up
}

// GetUpOk returns a tuple with the Up field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetUpOk() (*int64, bool) {
	if o == nil || o.Up == nil {
		return nil, false
	}
	return o.Up, true
}

// HasUp returns a boolean if a field has been set.
func (o *Benchmarks) HasUp() bool {
	if o != nil && o.Up != nil {
		return true
	}

	return false
}

// SetUp gets a reference to the given int64 and assigns it to the Up field.
func (o *Benchmarks) SetUp(v int64) {
	o.Up = &v
}

// GetUpScore returns the UpScore field value if set, zero value otherwise.
func (o *Benchmarks) GetUpScore() int32 {
	if o == nil || o.UpScore == nil {
		var ret int32
		return ret
	}
	return *o.UpScore
}

// GetUpScoreOk returns a tuple with the UpScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetUpScoreOk() (*int32, bool) {
	if o == nil || o.UpScore == nil {
		return nil, false
	}
	return o.UpScore, true
}

// HasUpScore returns a boolean if a field has been set.
func (o *Benchmarks) HasUpScore() bool {
	if o != nil && o.UpScore != nil {
		return true
	}

	return false
}

// SetUpScore gets a reference to the given int32 and assigns it to the UpScore field.
func (o *Benchmarks) SetUpScore(v int32) {
	o.UpScore = &v
}

// GetDown returns the Down field value if set, zero value otherwise.
func (o *Benchmarks) GetDown() int64 {
	if o == nil || o.Down == nil {
		var ret int64
		return ret
	}
	return *o.Down
}

// GetDownOk returns a tuple with the Down field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetDownOk() (*int64, bool) {
	if o == nil || o.Down == nil {
		return nil, false
	}
	return o.Down, true
}

// HasDown returns a boolean if a field has been set.
func (o *Benchmarks) HasDown() bool {
	if o != nil && o.Down != nil {
		return true
	}

	return false
}

// SetDown gets a reference to the given int64 and assigns it to the Down field.
func (o *Benchmarks) SetDown(v int64) {
	o.Down = &v
}

// GetDownScore returns the DownScore field value if set, zero value otherwise.
func (o *Benchmarks) GetDownScore() int32 {
	if o == nil || o.DownScore == nil {
		var ret int32
		return ret
	}
	return *o.DownScore
}

// GetDownScoreOk returns a tuple with the DownScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetDownScoreOk() (*int32, bool) {
	if o == nil || o.DownScore == nil {
		return nil, false
	}
	return o.DownScore, true
}

// HasDownScore returns a boolean if a field has been set.
func (o *Benchmarks) HasDownScore() bool {
	if o != nil && o.DownScore != nil {
		return true
	}

	return false
}

// SetDownScore gets a reference to the given int32 and assigns it to the DownScore field.
func (o *Benchmarks) SetDownScore(v int32) {
	o.DownScore = &v
}

// GetContractSuccess returns the ContractSuccess field value if set, zero value otherwise.
func (o *Benchmarks) GetContractSuccess() bool {
	if o == nil || o.ContractSuccess == nil {
		var ret bool
		return ret
	}
	return *o.ContractSuccess
}

// GetContractSuccessOk returns a tuple with the ContractSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetContractSuccessOk() (*bool, bool) {
	if o == nil || o.ContractSuccess == nil {
		return nil, false
	}
	return o.ContractSuccess, true
}

// HasContractSuccess returns a boolean if a field has been set.
func (o *Benchmarks) HasContractSuccess() bool {
	if o != nil && o.ContractSuccess != nil {
		return true
	}

	return false
}

// SetContractSuccess gets a reference to the given bool and assigns it to the ContractSuccess field.
func (o *Benchmarks) SetContractSuccess(v bool) {
	o.ContractSuccess = &v
}

// GetBenchFailureRate returns the BenchFailureRate field value if set, zero value otherwise.
func (o *Benchmarks) GetBenchFailureRate() int32 {
	if o == nil || o.BenchFailureRate == nil {
		var ret int32
		return ret
	}
	return *o.BenchFailureRate
}

// GetBenchFailureRateOk returns a tuple with the BenchFailureRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetBenchFailureRateOk() (*int32, bool) {
	if o == nil || o.BenchFailureRate == nil {
		return nil, false
	}
	return o.BenchFailureRate, true
}

// HasBenchFailureRate returns a boolean if a field has been set.
func (o *Benchmarks) HasBenchFailureRate() bool {
	if o != nil && o.BenchFailureRate != nil {
		return true
	}

	return false
}

// SetBenchFailureRate gets a reference to the given int32 and assigns it to the BenchFailureRate field.
func (o *Benchmarks) SetBenchFailureRate(v int32) {
	o.BenchFailureRate = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *Benchmarks) GetErrorType() string {
	if o == nil || o.ErrorType == nil {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetErrorTypeOk() (*string, bool) {
	if o == nil || o.ErrorType == nil {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *Benchmarks) HasErrorType() bool {
	if o != nil && o.ErrorType != nil {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *Benchmarks) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *Benchmarks) GetErrorDescription() string {
	if o == nil || o.ErrorDescription == nil {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || o.ErrorDescription == nil {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *Benchmarks) HasErrorDescription() bool {
	if o != nil && o.ErrorDescription != nil {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *Benchmarks) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetErrorFull returns the ErrorFull field value if set, zero value otherwise.
func (o *Benchmarks) GetErrorFull() string {
	if o == nil || o.ErrorFull == nil {
		var ret string
		return ret
	}
	return *o.ErrorFull
}

// GetErrorFullOk returns a tuple with the ErrorFull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetErrorFullOk() (*string, bool) {
	if o == nil || o.ErrorFull == nil {
		return nil, false
	}
	return o.ErrorFull, true
}

// HasErrorFull returns a boolean if a field has been set.
func (o *Benchmarks) HasErrorFull() bool {
	if o != nil && o.ErrorFull != nil {
		return true
	}

	return false
}

// SetErrorFull gets a reference to the given string and assigns it to the ErrorFull field.
func (o *Benchmarks) SetErrorFull(v string) {
	o.ErrorFull = &v
}

// GetScoreChange1day returns the ScoreChange1day field value if set, zero value otherwise.
func (o *Benchmarks) GetScoreChange1day() string {
	if o == nil || o.ScoreChange1day == nil {
		var ret string
		return ret
	}
	return *o.ScoreChange1day
}

// GetScoreChange1dayOk returns a tuple with the ScoreChange1day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetScoreChange1dayOk() (*string, bool) {
	if o == nil || o.ScoreChange1day == nil {
		return nil, false
	}
	return o.ScoreChange1day, true
}

// HasScoreChange1day returns a boolean if a field has been set.
func (o *Benchmarks) HasScoreChange1day() bool {
	if o != nil && o.ScoreChange1day != nil {
		return true
	}

	return false
}

// SetScoreChange1day gets a reference to the given string and assigns it to the ScoreChange1day field.
func (o *Benchmarks) SetScoreChange1day(v string) {
	o.ScoreChange1day = &v
}

// GetScoreChange7day returns the ScoreChange7day field value if set, zero value otherwise.
func (o *Benchmarks) GetScoreChange7day() string {
	if o == nil || o.ScoreChange7day == nil {
		var ret string
		return ret
	}
	return *o.ScoreChange7day
}

// GetScoreChange7dayOk returns a tuple with the ScoreChange7day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetScoreChange7dayOk() (*string, bool) {
	if o == nil || o.ScoreChange7day == nil {
		return nil, false
	}
	return o.ScoreChange7day, true
}

// HasScoreChange7day returns a boolean if a field has been set.
func (o *Benchmarks) HasScoreChange7day() bool {
	if o != nil && o.ScoreChange7day != nil {
		return true
	}

	return false
}

// SetScoreChange7day gets a reference to the given string and assigns it to the ScoreChange7day field.
func (o *Benchmarks) SetScoreChange7day(v string) {
	o.ScoreChange7day = &v
}

// GetScoreChange7daySmooth returns the ScoreChange7daySmooth field value if set, zero value otherwise.
func (o *Benchmarks) GetScoreChange7daySmooth() string {
	if o == nil || o.ScoreChange7daySmooth == nil {
		var ret string
		return ret
	}
	return *o.ScoreChange7daySmooth
}

// GetScoreChange7daySmoothOk returns a tuple with the ScoreChange7daySmooth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Benchmarks) GetScoreChange7daySmoothOk() (*string, bool) {
	if o == nil || o.ScoreChange7daySmooth == nil {
		return nil, false
	}
	return o.ScoreChange7daySmooth, true
}

// HasScoreChange7daySmooth returns a boolean if a field has been set.
func (o *Benchmarks) HasScoreChange7daySmooth() bool {
	if o != nil && o.ScoreChange7daySmooth != nil {
		return true
	}

	return false
}

// SetScoreChange7daySmooth gets a reference to the given string and assigns it to the ScoreChange7daySmooth field.
func (o *Benchmarks) SetScoreChange7daySmooth(v string) {
	o.ScoreChange7daySmooth = &v
}

func (o Benchmarks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FinalScore != nil {
		toSerialize["finalScore"] = o.FinalScore
	}
	if o.Latency != nil {
		toSerialize["latency"] = o.Latency
	}
	if o.LatencyScore != nil {
		toSerialize["latencyScore"] = o.LatencyScore
	}
	if o.Up != nil {
		toSerialize["up"] = o.Up
	}
	if o.UpScore != nil {
		toSerialize["upScore"] = o.UpScore
	}
	if o.Down != nil {
		toSerialize["down"] = o.Down
	}
	if o.DownScore != nil {
		toSerialize["downScore"] = o.DownScore
	}
	if o.ContractSuccess != nil {
		toSerialize["contractSuccess"] = o.ContractSuccess
	}
	if o.BenchFailureRate != nil {
		toSerialize["benchFailureRate"] = o.BenchFailureRate
	}
	if o.ErrorType != nil {
		toSerialize["errorType"] = o.ErrorType
	}
	if o.ErrorDescription != nil {
		toSerialize["errorDescription"] = o.ErrorDescription
	}
	if o.ErrorFull != nil {
		toSerialize["errorFull"] = o.ErrorFull
	}
	if o.ScoreChange1day != nil {
		toSerialize["scoreChange_1day"] = o.ScoreChange1day
	}
	if o.ScoreChange7day != nil {
		toSerialize["scoreChange_7day"] = o.ScoreChange7day
	}
	if o.ScoreChange7daySmooth != nil {
		toSerialize["scoreChange_7day_smooth"] = o.ScoreChange7daySmooth
	}
	return json.Marshal(toSerialize)
}

type NullableBenchmarks struct {
	value *Benchmarks
	isSet bool
}

func (v NullableBenchmarks) Get() *Benchmarks {
	return v.value
}

func (v *NullableBenchmarks) Set(val *Benchmarks) {
	v.value = val
	v.isSet = true
}

func (v NullableBenchmarks) IsSet() bool {
	return v.isSet
}

func (v *NullableBenchmarks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenchmarks(val *Benchmarks) *NullableBenchmarks {
	return &NullableBenchmarks{value: val, isSet: true}
}

func (v NullableBenchmarks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenchmarks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
